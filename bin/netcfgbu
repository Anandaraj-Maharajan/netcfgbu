#!/usr/bin/env python

# -----------------------------------------------------------------------------
# System Imports
# -----------------------------------------------------------------------------

import sys
import logging
import asyncio
from importlib import metadata
from collections import defaultdict
from errno import errorcode

# -----------------------------------------------------------------------------
# Public Imports
# -----------------------------------------------------------------------------

import asyncssh
import click
from tabulate import tabulate

# -----------------------------------------------------------------------------
# Private Imports
# -----------------------------------------------------------------------------

import netcfgbu
from netcfgbu.netcfgbu_ssh import ConfigBackupSSHSpec
from netcfgbu import netcfgbu_config
from netcfgbu import os_specs
from netcfgbu.logger import get_logger
from netcfgbu.probe import probe
from netcfgbu.aiofut import as_completed

import netcfgbu.inventory

VERSION = metadata.version(netcfgbu.__package__)

_LOG = logging.getLogger()
_LOG.addHandler(logging.NullHandler())

LN_SEP = '# ' + '-' * 78


# #############################################################################
#
#                                CODE BEGINS
#
# #############################################################################

# -----------------------------------------------------------------------------
#
#                                EXEC BACKUP
#
# -----------------------------------------------------------------------------

def exec_backup(app_cfg, inventory_recs):

    backup_tasks = []
    default_os_spec_cls = ConfigBackupSSHSpec
    log = logging.getLogger(netcfgbu.__package__)

    for host_cfg in inventory_recs:
        os_name = host_cfg['os_name']
        os_spec_def = app_cfg.get('os_specs', {}).get(os_name) or {}
        if 'class' in os_spec_def:
            os_spec_cls = os_specs.get_class(os_spec_def['class'])
        else:
            os_spec_cls = default_os_spec_cls

        host_spec = os_spec_cls(host_cfg=host_cfg, os_spec=os_spec_def, app_cfg=app_cfg)
        backup_tasks.append(host_spec.backup_config())

    async def process_backup_tasks():
        done = 0
        total = len(backup_tasks)
        for res in asyncio.as_completed(backup_tasks):
            bu_obj = await res
            done += 1
            _host_cfg = bu_obj.host_cfg
            log.info(f"DONE ({done}/{total}): {_host_cfg['host']}")

    try:
        loop = asyncio.get_event_loop()
        loop.run_until_complete(process_backup_tasks())

    except (OSError, asyncssh.Error) as exc:
        sys.exit('SSH connection failed: ' + str(exc))


# -----------------------------------------------------------------------------
#
#                                EXEC CHECK
#
# -----------------------------------------------------------------------------

def exec_probe(inventory):
    inv_n = len(inventory)
    log = get_logger()
    log.info(f"Checking SSH reachability on {inv_n} devices ...")

    tasks = dict()
    loop = asyncio.get_event_loop()

    tasks = {
        probe(rec.get('ipaddr') or rec.get('host')): rec
        for rec in inventory
    }

    report = defaultdict(list)

    async def proces_check():
        async for probe_task in as_completed(tasks):
            try:
                task_coro = probe_task.get_coro()
                rec = tasks[task_coro]
                probe_ok = 'OK' if probe_task.result() else 'FAIL'
                report[probe_ok].append(rec)

            except OSError as exc:
                probe_ok = 'ERROR'
                report['ERROR'].append((rec, exc))

            log.info(f"{rec['host']}: {probe_ok}")

    loop.run_until_complete(proces_check())

    ok_n = len(report['OK'])

    print(LN_SEP)

    if ok_n == inv_n:
        print(f"Summary: ALL {inv_n} OK!")
        print(LN_SEP)
        return

    fail_n = len(report['FAIL'])
    err_n = len(report['ERROR'])

    print(f"SUMMARY: TOTAL={inv_n} OK={ok_n} FAIL={fail_n} ERROR={err_n}")

    if fail_n:
        print("\n\nFAIL:")
        print(tabulate(
            headers=['host', 'os_name'],
            tabular_data=[[rec['host'], rec['os_name']]
                          for rec in report['FAIL']]
        ))

    if err_n:
        print("\n\nERROR:")
        print(tabulate(
            headers=['host', 'os_name', 'reason'],
            tabular_data=[
                [rec['host'], rec['os_name'], errorcode[exc.errno]]
                for rec, exc in report['ERROR']
            ]
        ))

    print(LN_SEP)


# -----------------------------------------------------------------------------
#
#                                CLI
#
# -----------------------------------------------------------------------------


opt_config_file = click.option(
    '-C', '--config',
    envvar='NETCFGBU_CONFIG',
    type=click.File()
)


@click.group()
@click.version_option(
    version=VERSION
)
def cli():
    pass


@cli.command(name='backup')
@opt_config_file
@click.option(
    '--limit', '-l',
    multiple=True,
    help="limit inventory",

)
def cli_backup(**cli_opts):
    app_cfg = netcfgbu_config.load(
        fileio=cli_opts['config']
    )

    inventory_recs = netcfgbu.inventory.load(
        app_cfg=app_cfg,
        limits=cli_opts['limit']
    )


@cli.command(name='probe')
@opt_config_file
@click.option(
    '--limit', '-l',
    multiple=True,
    help="limit inventory",

)
def cli_check(**cli_opts):
    """
    Probe each device for SSH reachablility.

    The probe check determines if the device is reachable and the SSH port
    is available to receive connections.
    """
    app_cfg = netcfgbu_config.load(
        fileio=cli_opts['config']
    )

    if not cli_opts['limit']:
        value = click.prompt('Process full inventory, are you sure? [n/Y]', default='n')
        if value != 'Y':
            sys.exit("aborting.")

    inventory_recs = netcfgbu.inventory.load(
        app_cfg=app_cfg,
        limits=cli_opts['limit']
    )

    if not inventory_recs:
        sys.exit("No inventory matching limits.")

    exec_probe(inventory_recs)


@cli.command(name='inventory')
@opt_config_file
@click.option(
    '--limit', '-l',
    multiple=True,
    help="limit inventory",

)
def cli_inventory(**cli_opts):

    app_cfg = netcfgbu_config.load(
        fileio=cli_opts['config']
    )

    inventory_recs = netcfgbu.inventory.load(
        app_cfg=app_cfg,
        limits=cli_opts['limit']
    )

    print(tabulate(
        headers=["host", "os_name"],
        tabular_data=[[rec['host'], rec['os_name']] for rec in inventory_recs]
    ))


if __name__ == '__main__':
    cli()
