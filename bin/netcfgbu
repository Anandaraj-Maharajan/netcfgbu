#!/usr/bin/env python

# -----------------------------------------------------------------------------
# System Imports
# -----------------------------------------------------------------------------

import sys
import asyncio
from importlib import metadata
from collections import defaultdict, Counter
from errno import errorcode
from operator import itemgetter
from textwrap import indent
import csv
from time import monotonic
from datetime import datetime

# -----------------------------------------------------------------------------
# Public Imports
# -----------------------------------------------------------------------------

import click
from tabulate import tabulate
from first import first

# -----------------------------------------------------------------------------
# Private Imports
# -----------------------------------------------------------------------------

import netcfgbu
from netcfgbu import config
from netcfgbu.connectors import set_max_startups
from netcfgbu.os_specs import make_host_os_spec
from netcfgbu.logger import get_logger, stop_aiologging
from netcfgbu.probe import probe
from netcfgbu.aiofut import as_completed

import netcfgbu.inventory

VERSION = metadata.version(netcfgbu.__package__)

LN_SEP = "# " + "-" * 78
SPACES_4 = " " * 4


# #############################################################################
#
#                                CODE BEGINS
#
# #############################################################################


# def make_batches(tasks, batch_n=None):
#     if not batch_n:
#         return [tasks]
#
#     args = [iter(tasks)] * batch_n
#     batches = list(zip_longest(*args))
#     if None in batches[-1]:
#         batches[-1] = [coro for coro in batches[-1] if coro]
#
#     get_logger().info(f"BATCHING by {batch_n}, COUNT: {len(batches)}")
#     return batches


def err_reason(exc):
    return {
        str: lambda: exc,
        asyncio.TimeoutError: lambda: "TIMEOUT%s" % (str(exc.args or "")),
        OSError: lambda: errorcode[exc.errno],
    }.get(exc.__class__, lambda: "%s: %s" % (str(exc.__class__.__name__), str(exc)))()


class Report(object):
    TIME_FORMAT = "%Y-%b-%d %I:%M:%S %p"

    def __init__(self):
        self.start_ts = None
        self.start_tm = 0

        self.stop_ts = None
        self.stop_tm = 0

        self.task_results = defaultdict(list)

    def start_timing(self):
        self.start_ts = datetime.now()
        self.start_tm = monotonic()

    def stop_timing(self):
        self.stop_ts = datetime.now()
        self.stop_tm = monotonic()

    @property
    def start_time(self):
        return self.start_ts.strftime(self.TIME_FORMAT)

    @property
    def stop_time(self):
        return self.stop_ts.strftime(self.TIME_FORMAT)

    @property
    def duration(self):
        return self.stop_tm - self.start_tm

    def print_report(self):
        if not self.stop_tm:
            self.stop_timing()

        fail_n = len(self.task_results[False])
        ok_n = len(self.task_results[True])

        total_n = ok_n + fail_n

        print(LN_SEP)

        print(
            f"Summary: TOTAL={total_n}, OK={ok_n}, FAIL={fail_n}\n"
            f"         START={self.start_time}, STOP={self.stop_time}\n"
            f"         DURATION={self.duration:.3f}s"
        )

        headers = ["host", "os_name", "reason"]

        failure_tabular_data = [
            [rec["host"], rec["os_name"], err_reason(exc)]
            for rec, exc in self.task_results[False]
        ]

        if not fail_n:
            print(LN_SEP)
            return

        with open("failures.csv", "w+") as ofile:
            wr_csv = csv.writer(ofile)
            wr_csv.writerow(headers)
            wr_csv.writerows(failure_tabular_data)

        print(f"\n\nFAILURES: {fail_n}")
        print(tabulate(headers=headers, tabular_data=failure_tabular_data))
        print(LN_SEP)


# -----------------------------------------------------------------------------
#
#                                EXEC BACKUP
#
# -----------------------------------------------------------------------------


def exec_backup(app_cfg, inventory_recs):
    backup_tasks = dict()

    log = get_logger()

    backup_tasks = {
        make_host_os_spec(rec, app_cfg).backup_config(): rec for rec in inventory_recs
    }

    total = len(backup_tasks)
    report = Report()
    done = 0

    async def process_batch():
        nonlocal done
        async for task in as_completed(backup_tasks):
            done += 1
            coro = task.get_coro()
            rec = backup_tasks[coro]
            msg = f"DONE ({done}/{total}): {rec['host']} "

            try:
                res = task.result()
                ok = res is True
                report.task_results[ok].append((rec, res))

            except Exception as exc:
                ok = False
                report.task_results[False].append((rec, exc))

            log.info(msg + "PASS" if ok else "FALSE")

    loop = asyncio.get_event_loop()
    report.start_timing()
    loop.run_until_complete(process_batch())
    report.stop_timing()
    stop_aiologging()
    report.print_report()


# -----------------------------------------------------------------------------
#
#                                EXEC LOGIN
#
# -----------------------------------------------------------------------------


def exec_test_login(app_cfg, inventory_recs, cli_opts):
    login_tasks = {
        make_host_os_spec(rec, app_cfg).test_login(timeout=cli_opts["timeout"]): rec
        for rec in inventory_recs
    }

    if (batch_n := cli_opts["batch"]) is not None:
        set_max_startups(batch_n)

    total = len(login_tasks)

    report = Report()
    done = 0
    log = get_logger()

    async def process_batch():
        nonlocal done

        async for task in as_completed(login_tasks):
            done += 1
            coro = task.get_coro()
            rec = login_tasks[coro]
            msg = f"DONE ({done}/{total}): {rec['host']} "
            try:
                if login_user := task.result():
                    log.info(msg + f"with user {login_user}")
                    report.task_results[True].append(rec)
                else:
                    reason = "all credentials failed"
                    log.warning(msg + reason)
                    report.task_results[False].append((rec, reason))

            except asyncio.TimeoutError as exc:
                log.warning(msg + "Timeout")
                report.task_results[False].append((rec, exc))

            except Exception as exc:
                report.task_results[False].append((rec, exc))
                log.error(msg + f": {err_reason(exc)}")

    loop = asyncio.get_event_loop()
    report.start_timing()
    loop.run_until_complete(process_batch())
    report.stop_timing()
    stop_aiologging()
    report.print_report()


# -----------------------------------------------------------------------------
#
#                                EXEC PROBE
#
# -----------------------------------------------------------------------------


def exec_probe(inventory, timeout=None):
    inv_n = len(inventory)
    log = get_logger()
    log.info(f"Checking SSH reachability on {inv_n} devices ...")

    tasks = dict()
    loop = asyncio.get_event_loop()

    tasks = {
        probe(
            rec.get("ipaddr") or rec.get("host"), timeout=timeout, raise_exc=True
        ): rec
        for rec in inventory
    }

    report = Report()

    async def proces_check():
        async for probe_task in as_completed(tasks):
            task_coro = probe_task.get_coro()
            rec = tasks[task_coro]

            try:
                probe_ok = probe_task.result()
                report.task_results[probe_ok].append((rec, probe_ok))

            except (asyncio.TimeoutError, OSError) as exc:
                probe_ok = False
                report.task_results[False].append((rec, exc))

            log.info(f"{rec['host']}: {'PASS' if probe_ok else 'FAIL'}")

    report.start_timing()
    loop.run_until_complete(proces_check())
    report.stop_timing()
    stop_aiologging()
    report.print_report()


# -----------------------------------------------------------------------------
#
#                                    CLI
#
# -----------------------------------------------------------------------------


class WithConfigCommand(click.Command):
    def invoke(self, ctx):
        try:
            ctx.obj["app_cfg"] = config.load(fileio=ctx.params["config"])

        except Exception as exc:
            ctx.fail(exc.args[0])

        super().invoke(ctx)


class WithInventoryCommand(click.Command):
    def invoke(self, ctx):

        try:
            app_cfg = ctx.obj["app_cfg"] = config.load(fileio=ctx.params["config"])
            ctx.obj["inventory_recs"] = netcfgbu.inventory.load(
                app_cfg=app_cfg,
                limits=ctx.params["limit"],
                excludes=ctx.params["exclude"],
            )

        except FileNotFoundError as exc:
            sys.exit(f"File not found: {exc.filename}")

        except Exception as exc:
            ctx.fail(f"{exc.args[0]}")

        if not ctx.obj["inventory_recs"]:
            sys.exit("No inventory matching limits.")

        super().invoke(ctx)


opt_config_file = click.option(
    "-C",
    "--config",
    envvar="NETCFGBU_CONFIG",
    type=click.File(),
    required=True,
    default="netcfgbu.toml",
)

opt_limits = click.option(
    "--limit", "-l", "--include", multiple=True, help="limit inventory",
)

opt_excludes = click.option(
    "--exclude", "-e", multiple=True, help="exclude from inventory",
)

opt_batch = click.option(
    "--batch",
    "-b",
    type=click.IntRange(1, 500),
    help="inevntory record processing batch size",
)

opt_timeout = click.option(
    "--timeout", "-t", help="timeout(s)", type=click.IntRange(0, 5 * 60)
)


@click.group()
@click.version_option(version=VERSION)
def cli():
    pass


@cli.command(name="backup", cls=WithInventoryCommand)
@opt_config_file
@opt_limits
@opt_excludes
@opt_batch
@click.pass_context
def cli_backup(ctx, **_cli_opts):
    """
    Backup network configurations.
    """
    exec_backup(app_cfg=ctx.obj["app_cfg"], inventory_recs=ctx.obj["inventory_recs"])


# -----------------------------------------------------------------------------
#                                Probe Test Command
# -----------------------------------------------------------------------------


@cli.command(name="probe", cls=WithInventoryCommand)
@opt_config_file
@opt_limits
@opt_excludes
@opt_timeout
@click.pass_context
def cli_check(ctx, **cli_opts):
    """
    Probe device for SSH reachablility.

    The probe check determines if the device is reachable and the SSH port
    is available to receive connections.
    """
    exec_probe(ctx.obj["inventory_recs"], timeout=cli_opts["timeout"])


# -----------------------------------------------------------------------------
#                                Login Test Command
# -----------------------------------------------------------------------------


@cli.command(name="login", cls=WithInventoryCommand)
@opt_config_file
@opt_limits
@opt_excludes
@opt_timeout
@opt_batch
@click.pass_context
def cli_login(ctx, **cli_opts):
    """
    Verify SSH login to devices.
    """

    exec_test_login(ctx.obj["app_cfg"], ctx.obj["inventory_recs"], cli_opts)


# -----------------------------------------------------------------------------
#                                Inventory Commands
# -----------------------------------------------------------------------------


@cli.group(name="inventory")
def cli_inventory():
    """
    [ls, build, ...]
    """
    pass


@cli_inventory.command("ls", cls=WithInventoryCommand)
@opt_config_file
@opt_limits
@opt_excludes
@click.option("--brief", "-b", is_flag=True)
@click.pass_context
def cli_inventory_list(ctx, **cli_opts):
    inventory_recs = ctx.obj["inventory_recs"]
    os_names = Counter(rec["os_name"] for rec in inventory_recs)

    os_name_table = indent(
        tabulate(
            headers=["os_name", "count"],
            tabular_data=sorted(os_names.items(), key=itemgetter(1), reverse=True),
        ),
        SPACES_4,
    )

    print(LN_SEP)
    print(
        f"""
SUMMARY: TOTAL={len(inventory_recs)}

{os_name_table}
"""
    )

    if cli_opts["brief"] is True:
        return

    print(
        tabulate(
            headers=["host", "os_name"],
            tabular_data=[[rec["host"], rec["os_name"]] for rec in inventory_recs],
        )
    )


@cli_inventory.command("build", cls=WithConfigCommand)
@opt_config_file
@click.option("--name", "-n", help="inventory name")
@click.option("--brief", is_flag=True)
@click.pass_context
def cli_inventory_build(ctx, **cli_opts):
    """
    Build the inventory file.

    If the netcfgbu configuraiton file contains inventory definitions then you
    can use this command to the script to build the inventory.
    """
    from netcfgbu.cli.inventory import build
    inv_secs = ctx.obj['app_cfg'].get('inventory')
    if not inv_secs:
        sys.exit("No inventory sections defined in configuration.")

    if inv_name := cli_opts['name']:
        inv_df = first(inv for inv in inv_secs if inv.get('name', '') == inv_name)
    else:
        inv_df = ctx.obj["app_cfg"]["inventory"][0]

    if not inv_df:
        sys.exit("Inventory not defined in configuration file")

    build(inv_df)


if __name__ == "__main__":
    cli(obj={})
